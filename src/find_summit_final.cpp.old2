#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv/cv.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
/////////////////////////////////////
#include <iostream>
#include <stdio.h>
#include <stdlib.h>


///Global variables --------------------------------------
static const char WINDOW_NAME_BW[] = "window_image_threshold";
static const char WINDOW_NAME_FINAL[] = "window_image_contours";


int threshold_value = 0;
int threshold_type = 3;;
int const max_value = 255;
int const max_type = 4;
int const max_BINARY_value = 255;

char* trackbar_type="Type: \n 0: Binary \n 1: Binary Inverted \n 2: Truncate \n 3: To Zero \n 4: To Zero Inverted";

char* trackbar_value="Value";

cv::Mat image;
cv::Mat image_2;
cv::Mat image_hsv;
cv::Mat image_bw;


///The workhorse class ------------------------------------
class FindSummit
{
  image_transport::CameraSubscriber sub_;
  image_transport::Publisher pub_;
  
public:
  FindSummit();

  void imageCb(const sensor_msgs::ImageConstPtr& image_msg,
               const sensor_msgs::CameraInfoConstPtr& info_msg);
  void imageShow (const ros::TimerEvent& e);
  
  static void Threshold_Demo( int, void* ); 
};

///Contructor ---------------------------------------------
 FindSummit::FindSummit()
 {
    ROS_INFO("Init Class");
	ros::NodeHandle nh_;
	image_transport::ImageTransport it_(nh_);
    std::string image_topic = "/quadrotor/downward_cam/camera/image";
    cv::namedWindow(WINDOW_NAME_BW, CV_WINDOW_AUTOSIZE);
    cv::namedWindow(WINDOW_NAME_FINAL, CV_WINDOW_AUTOSIZE);
    ROS_INFO("Window opened"); 

    cv::createTrackbar( trackbar_type, WINDOW_NAME_BW, &threshold_type, max_type, &FindSummit::Threshold_Demo, this);
    cv::createTrackbar( trackbar_value, WINDOW_NAME_BW, &threshold_value, max_value, &FindSummit::Threshold_Demo, this);
    ROS_INFO("Trackbars added");

    sub_ = it_.subscribeCamera(image_topic, 1, &FindSummit::imageCb, this);
    pub_ = it_.advertise("image_out", 1);   
	ROS_INFO("Setup completed");
  }
  
///Function image -------------------------------------------
  void FindSummit::imageCb(const sensor_msgs::ImageConstPtr& image_msg,const sensor_msgs::CameraInfoConstPtr& info_msg)
  {
    cv_bridge::CvImagePtr input_bridge;
    ROS_INFO("Img recieved!!!");
    
    try {
      input_bridge = cv_bridge::toCvCopy(image_msg, sensor_msgs::image_encodings::BGR8); //Maybe BGR8
      image = input_bridge->image;
      image_2 = input_bridge->image;
    }
    catch (cv_bridge::Exception& ex){
      ROS_ERROR("[draw_frames] Failed to convert image %s", ex.what());
    }
    FindSummit::Threshold_Demo(0,0);
		
	//pub_.publish(input_bridge->toImageMsg());
  }


///threshold and contour detection function -----------------------------
  void FindSummit::Threshold_Demo( int, void* )
{
   std::vector< std::vector<cv::Point> > contours;
   std::vector<cv::Vec4i> hierarchy;
   std::vector<cv::Point> approx;

   cv::cvtColor(image, image_hsv , CV_RGB2GRAY); 
   cv::threshold(image_hsv, image_bw, threshold_value, max_BINARY_value, threshold_type );
   //ROS_INFO("Threshold demo");

   cv::imshow(WINDOW_NAME_BW,image_bw);
   cv::waitKey(3);

   //copy
   cv::Mat image_1=image_bw;

   //finding all contours in the image
   cv::findContours(image_1, contours,hierarchy,CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, cv::Point(0,0));
   //ROS_INFO("Find contours");
   //this function modifies the image


   //---------------------------------------------------------
   
   for (int i = 0; i < contours.size(); i++){
    	//ROS_INFO("Loop");
		cv::approxPolyDP(cv::Mat(contours[i]), approx, cv::arcLength(cv::Mat(contours[i]), true)* 0.02, true);
		//ROS_INFO("approxPoly");

		//Skip small or non-convex objects
        if (std::fabs(cv::contourArea(contours[i])) < 100 || !cv::isContourConvex(approx))
			continue;
					
                
		//if there are 0-9 vertices  in the contour and the area of the triangle is more than 100 pixels
		 if (approx.size() <= 8 && fabs(contourArea(cv::Mat(approx))) > 100 && cv::isContourConvex(cv::Mat(approx))){
			ROS_INFO("hexagon found");
			//iterating through each point
			cv::Point pt;
			for(int j=0;j<approx.size();j++){
				cv::Point point = approx[i];
				//ROS_INFO("extracting points X %d Y %d",point.x, point.y);

				if (j == approx.size()-1)
				{
					cv::line(image_2, approx.at(j), approx.at(0), cv::Scalar(0,255,0), 4);
				}
				else
				{
					cv::line(image_2, approx.at(j), approx.at(j+1), cv::Scalar(0,255,0), 4);
				}
			}
			
			//drawing lines around the hexagon
			//cv::drawContours( approx, contours, 2, 23, 2, 8, hierarchy, 0, cv::Point());
			// ROS_INFO("draw lines");
		 }
	}

    cv::imshow(WINDOW_NAME_FINAL,image_2);
    cv::waitKey(3);
}


///main ----------------------------------------------------
int main(int argc, char** argv)
{
  ros::init(argc, argv, "find_summit_shape");
  ROS_INFO("Ros node started");
  FindSummit find_shape;
  ROS_INFO("Spinng");
  ros::spin();
}
