#include <ros/ros.h>
#include <std_msgs/Empty.h>
#include <std_srvs/Empty.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/PoseStamped.h>
#include <tf/transform_listener.h>
//se debera hacer el control con una frecuencia de menor que 1/(1/20)* frecuencia de recepcion de posicion del coche aprox
//Estimacion de la posicion se emite a 13Hz -> 0.03s - 0.2s => 50*13 = 650Hz , 0.0006s - 0.04s

double sumatorio_error_x = 0;
double sumatorio_error_y = 0;

double derror_x = 0;
double derror_y = 0;

double position_x0;
double position_y0;

float t_ref = 0;


class ARDroneJoy
{
  public:
    ARDroneJoy();

    geometry_msgs::Twist vel;
    std_msgs::Empty emptyMsg;
    std_srvs::Empty emptySrv;

    double current_vel;
    double position_x;
    double position_y;

    tf::Vector3  pose_base_link;

  
    ros::Publisher vel_pub_; //! It will publish into command velocity (for the robot) and the ptz_state (for the pantilt)
    ros::Publisher takeoff_pub ;
    ros::Publisher land_pub;
    ros::Publisher reset_pub;
    ros::Subscriber joy_sub_;//! It will be suscribed to the joystick
    ros::ServiceClient client_1;//!togglecam
    ros::ServiceClient client_2;//!flattrim
    ros::Subscriber summit_position_;
    ros::Publisher position_quad_base_;

    std::string cmd_topic_vel_;  //! Name of the topic where it will be publishing the velocity

    //Transformations
    tf::TransformListener tf_listener;
    tf::StampedTransform transform;

    void PID_control();
    void  tracking(const geometry_msgs::PoseStamped& centroid);

  private:
    ros::NodeHandle nh_;
 };


ARDroneJoy::ARDroneJoy()
{
	std::string summit_position_topic;
    std::string position_quad_base_topic;
	current_vel = 1.0;

    nh_.param("cmd_topic_vel", cmd_topic_vel_, std::string("quadrotor/cmd_vel"));
    nh_.param("summit_position_topic", summit_position_topic, std::string("find_summit_final/Estimated_position"));
    nh_.param("position_quad_base_topic", position_quad_base_topic, std::string("tracking/tarjet_position"));

    ROS_INFO("Service I/O = [%s]", cmd_topic_vel_.c_str());

  	// Publish through the node handle Twist type messages to the ARDrone_ctrl/command topic
    vel_pub_ = nh_.advertise<geometry_msgs::Twist>(cmd_topic_vel_, 1);
	//Publish to topics
	takeoff_pub = nh_.advertise<std_msgs::Empty>("ardrone/takeoff", 1);
	land_pub = nh_.advertise<std_msgs::Empty>("ardrone/land", 1);
	reset_pub = nh_.advertise<std_msgs::Empty>("ardrone/reset", 1);
    position_quad_base_ = nh_.advertise<geometry_msgs::PoseStamped>(position_quad_base_topic, 1);

	//Ask for services
	client_1 = nh_.serviceClient<std_srvs::Empty>("ardrone/togglecam");
	client_2 = nh_.serviceClient<std_srvs::Empty>("ardrone/flattrim");

	//Subscribe
	summit_position_ = nh_.subscribe(summit_position_topic, 1, &ARDroneJoy::tracking, this);

    int i = 0;
    while(i < 2)
    {
        ROS_ERROR("%d",i);
        tf_listener.waitForTransform("/image_plane","/quadrotor/base_link", ros::Time(0), ros::Duration(4.0));
        try{
            tf_listener.lookupTransform("/image_plane","/quadrotor/base_link",ros::Time(0), transform);
            i=3;
            t_ref = ros::Time::now().toSec();
        }
        catch (tf::TransformException ex){
            ROS_ERROR("%s",ex.what());
            ros::Duration(1.0).sleep();
            i++;
        }
    }
}


void  ARDroneJoy::tracking(const geometry_msgs::PoseStamped& centroid){

    ros::Rate loop_rate(13); //Hz
    while(ros::ok()){

        ROS_INFO("LOCALIZADO");
        pose_base_link = transform(tf::Vector3(centroid.pose.position.x,centroid.pose.position.y,centroid.pose.position.z));
        ROS_INFO("SummitXL Position: (%f,  %f , %f)  en metros respecto del cuadrotor",pose_base_link.getX(),pose_base_link.getY(), pose_base_link.getZ());
        ROS_INFO("Tiempo desde comienzo = %.5f", ros::Time::now().toSec() - t_ref);

        // REGULADOR P - proporcional al error ///////////////////////////////////////
        //vel.linear.x = 0.57*pose_base_link.getX();//calculo de K_c
        //vel.linear.x = -0.03;//default -vx of the quadrotor //
        //vel.linear.y = 0.56*pose_base_link.getY();

        /*vel.linear.x = 0.3*current_vel*pose_base_link.getX();
        vel.linear.y = 0.3*current_vel*pose_base_link.getY();*/
        //vel.linear.x = transform.getOrigin().x(),transform.getOrigin().x());
        //////////////////////////////////////////////////////////////////////////////

        //REGULADOR PI - proporcional a la integral del error ////////////////////////
        sumatorio_error_x += pose_base_link.getX(); //Sistema simétrico
        sumatorio_error_y += pose_base_link.getY();

        //vel.linear.x = 0.25*current_vel*pose_base_link.getX() + 0.02*current_vel*sumatorio_error_x ;
        //vel.linear.y = 0.25*current_vel*pose_base_link.getY() + 0.02*current_vel*sumatorio_error_x ;
        //////////////////////////////////////////////////////////////////////////////

        //REGULADOR PID - añadimos proporcionalidad ante la derivada del error ///////
        derror_x= pose_base_link.getX() - position_x0;
        derror_x= pose_base_link.getY() - position_y0;

        vel.linear.x = 0.35*pose_base_link.getX() + 0.0007*sumatorio_error_x + 0.005*derror_x;//bien
        vel.linear.y = 0.35*pose_base_link.getY() + 0.0007*sumatorio_error_x + 0.005*derror_y;

        //vel.linear.x = 0.35*current_vel*pose_base_link.getX() + 0.003*current_vel*sumatorio_error_x + 0.025*current_vel*derror_x;
        //vel.linear.y = 0.35*current_vel*pose_base_link.getY() + 0.003*current_vel*sumatorio_error_x + 0.025*current_vel*derror_y;

        //Estimación de Ziegler-Nichols
        //vel.linear.x = 0.342*current_vel*pose_base_link.getX() + 0.342*current_vel*sumatorio_error_x + 0.0427*current_vel*derror_x;
        //vel.linear.y = 0.336*current_vel*pose_base_link.getY() + 0.388*current_vel*sumatorio_error_x + 0.0726*current_vel*derror_y;


        position_x0 = pose_base_link.getX();
        position_y0 = pose_base_link.getY();
        //////////////////////////////////////////////////////////////////////////////

        geometry_msgs::PoseStamped real_centroid;
            real_centroid.header.stamp= ros::Time::now();
            real_centroid.header.seq = ros::Time::now().toSec() - t_ref;
            real_centroid.header.frame_id = "/quadrotor/base_link";
            real_centroid.pose.orientation.w=1;
            real_centroid.pose.orientation.x=0;
            real_centroid.pose.orientation.y=0;
            real_centroid.pose.orientation.z=0;
            real_centroid.pose.position.x=pose_base_link.getX();
            real_centroid.pose.position.y=pose_base_link.getY();
            real_centroid.pose.position.z=pose_base_link.getZ();


        ROS_INFO("Sending Velocity:  (%f,  %f)",vel.linear.x, vel.linear.y);
        ROS_INFO("Acumulated errors:  (%f,  %f)\n\n",sumatorio_error_x, sumatorio_error_y);

        position_quad_base_.publish(real_centroid);
        vel_pub_.publish(vel);
        loop_rate.sleep();
    }
}

/*void ARDroneJoy::PID_control(){

}*/


int main(int argc, char** argv)
{
	ros::init(argc, argv, "ArDrone_Gamepad");
	ARDroneJoy ardrone_joy;
    ros::Duration(2).sleep();
    ROS_INFO("About to start sequence");

    ros::spin();
}

